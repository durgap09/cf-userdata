AWSTemplateFormatVersion: "2010-09-09"
Description: "Create ALB, ALB security group, target groups, listeners and listener rules"
Parameters:
    VPC:
        Type: 'AWS::SSM::Parameter::Value<AWS::EC2::VPC>'
        Description: The vpc to launch the service
        Default: Vpc_Id

    PublicSubnet1:
        Type: 'AWS::SSM::Parameter::Value<AWS::EC2::Subnet::Id>'
        Description: The subnet where to launch the service
        Default: Public_Subnet_1

    PublicSubnet2:
        Type: 'AWS::SSM::Parameter::Value<AWS::EC2::Subnet::Id>'
        Description: the subnet where to Launch the service
        Default: Public_Subnet_2
    KeyName:
        Description: Name of an existing EC2 KeyPair to enable SSH access to the instance
        Type: 'AWS::SSM::Parameter::Value<AWS::EC2::KeyPair::KeyName>'
        Default: KeyName
        ConstraintDescription: must be the name of an existing EC2 KeyPair.
    InstanceType:
        Description: WebServer EC2 instance type
        Type: String
        Default: t2.large
        AllowedValues: [t2.large, t3.large]
        ConstraintDescription: must be a valid EC2 instance type.
    SSHLocation:
        Description: The IP address range that can be used to SSH to the EC2 instances
        Type: String
        MinLength: 9
        MaxLength: 18
        Default: 0.0.0.0/0
        AllowedPattern: (\d{1,3})\.(\d{1,3})\.(\d{1,3})\.(\d{1,3})/(\d{1,2})
        ConstraintDescription: must be a valid IP CIDR range of the form x.x.x.x/x.
    LatestAmiId:
        Type:  'AWS::SSM::Parameter::Value<AWS::EC2::Image::Id>'
        Default: ImageID

    SubnetId:
        Type: 'AWS::SSM::Parameter::Value<AWS::EC2::Subnet::Id>'
        Default: SubnetID
        #Properties:
        #  MapPublicIpOnLaunch: 'false'
        Description: SubnetId of an existing subnet (for the primary network) in your Virtual Private Cloud (VPC)
        ConstraintDescription: must be an existing subnet in the selected Virtual Private Cloud.

    InstanceProfile:
        Type: 'AWS::SSM::Parameter::Value<AWS::IAM::InstanceProfile>'
        Default: IAM_ROLE

    CertificateArn:
        Type: 'AWS::SSM::Parameter::Value<AWS::CertificateManager::Certificate>'
        Default: Certficate_ARN

Resources:

    EC2Instance:
        Type: AWS::EC2::Instance
        Properties:
            InstanceType: !Ref 'InstanceType'
            SecurityGroups: [!Ref 'InstanceSecurityGroup']
            KeyName: !Ref 'KeyName'
            BlockDeviceMappings:
            - DeviceName: '/dev/sda1'
              Ebs:
                VolumeSize: '50'
            ImageId: !Ref 'LatestAmiId'
            IamInstanceProfile: !Ref 'InstanceProfile'
            UserData:
                Fn::Base64: !Sub
                - |
                  #!/bin/bash
                  exec > >(tee /var/log/user-data.log|logger -t user-data -s 2>/dev/console) 2>&1
                  # Sleep for the instance role might not be properly attached
                  sleep 15
                  sudo apt update
                  sudo apt install git -y
                  sudo apt install awscli -y
                  apt install awscli -y
                  sudo su
                  git clone https://github.com/durgap09/cf-userdata.git
                  cd /cf-userdata/
                  bash run.sh
                - {
                  }
            Tags:
                -
                   Key: Name
                   Value: 'Qcloud-Instance'


    InstanceSecurityGroup:
        Type: AWS::EC2::SecurityGroup
        Properties:
            GroupDescription: Enable SSH access via port 22
            SecurityGroupIngress:
            -
                IpProtocol: tcp
                FromPort: 22
                ToPort: 22
                CidrIp: !Ref 'SSHLocation'
            -
                IpProtocol: tcp
                FromPort: 80
                ToPort: 80
                CidrIp: !Ref 'SSHLocation'
            -
                IpProtocol: tcp
                FromPort: 443
                ToPort: 443
                CidrIp: !Ref 'SSHLocation'

    ALBSecurityGroup:
        Type: "AWS::EC2::SecurityGroup"
        Properties:
            GroupDescription: "security group for ALB"
            GroupName: "Qcloud-ALB-SG"
            Tags:
              -
                Key: "Name"
                Value: "Qcloud-ALB-SG"
            VpcId: !Ref VPC
            SecurityGroupIngress:
              -
                CidrIp: "0.0.0.0/0"
                FromPort: 80
                IpProtocol: "tcp"
                ToPort: 80
              -
                CidrIp: "0.0.0.0/0"
                FromPort: 443
                IpProtocol: "tcp"
                ToPort: 443

    ApplicationLoadBalancer:
        Type: "AWS::ElasticLoadBalancingV2::LoadBalancer"
        Properties:
            Name: "Qcloud-Appmodz-ALB"
            Scheme: "internet-facing"
            Type: "application"
            Subnets:
              - !Ref PublicSubnet1
              - !Ref PublicSubnet2
            SecurityGroups:
              - !Ref ALBSecurityGroup
            IpAddressType: "ipv4"
            LoadBalancerAttributes:
              -
                Key: "access_logs.s3.enabled"
                Value: "false"
              -
                Key: "idle_timeout.timeout_seconds"
                Value: "4000"
              -
                Key: "deletion_protection.enabled"
                Value: "false"
              -
                Key: "routing.http2.enabled"
                Value: "true"
              -
                Key: "routing.http.drop_invalid_header_fields.enabled"
                Value: "false"

    HTTPSListener:
        Type: "AWS::ElasticLoadBalancingV2::Listener"
        Properties:
            LoadBalancerArn: !Ref ApplicationLoadBalancer
            Port: 443
            Protocol: "HTTPS"
            SslPolicy: "ELBSecurityPolicy-2016-08"
            Certificates:
              -
                CertificateArn: !Ref 'CertificateArn'

            DefaultActions:
              -
                Order: 1
                TargetGroupArn: !Ref Test1TargetGroup
                Type: "forward"

    HTTPListener:
        Type: "AWS::ElasticLoadBalancingV2::Listener"
        Properties:
            LoadBalancerArn: !Ref ApplicationLoadBalancer
            Port: 80
            Protocol: "HTTP"
            DefaultActions:
              -
                Order: 1
                RedirectConfig:
                    Protocol: "HTTPS"
                    Port: "443"
                    Host: "#{host}"
                    Path: "/#{path}"
                    Query: "#{query}"
                    StatusCode: "HTTP_301"
                Type: "redirect"

    Test1TargetGroup:
        Type: "AWS::ElasticLoadBalancingV2::TargetGroup"
        Properties:
            HealthCheckIntervalSeconds: 30
            HealthCheckPath: "/"
            Port: 80
            Protocol: "HTTP"
            HealthCheckPort: "traffic-port"
            HealthCheckProtocol: "HTTP"
            HealthCheckTimeoutSeconds: 5
            UnhealthyThresholdCount: 2
            TargetType: "instance"
            Matcher:
                HttpCode: "200"
            HealthyThresholdCount: 5
            VpcId: !Ref VPC
            Name: "Qcloud-Appmodz-TargetGroup"
            Targets:
              - Id:
                  Ref: "EC2Instance"
                Port: 80
            HealthCheckEnabled: true
            TargetGroupAttributes:
              -
                Key: "stickiness.enabled"
                Value: "false"
              -
                Key: "deregistration_delay.timeout_seconds"
                Value: "300"
              -
                Key: "stickiness.type"
                Value: "lb_cookie"
              -
                Key: "stickiness.lb_cookie.duration_seconds"
                Value: "86400"
              -
                Key: "slow_start.duration_seconds"
                Value: "0"
              -
                Key: "load_balancing.algorithm.type"
                Value: "round_robin"


    TestListenerRule1:
        Type: "AWS::ElasticLoadBalancingV2::ListenerRule"
        Properties:
            Priority: "1"
            ListenerArn: !Ref HTTPSListener
            Conditions:
              -
                Field: "host-header"
                Values:
                  - "test1.blog.avrcr.com"
            Actions:
              -
                Type: "forward"
                TargetGroupArn: !Ref Test1TargetGroup
                Order: 1
                ForwardConfig:
                    TargetGroups:
                      -
                        TargetGroupArn: !Ref Test1TargetGroup
                        Weight: 1
                    TargetGroupStickinessConfig:
                        Enabled: false


Outputs:
    ALB:
        Description: The created loadbalancer
        Value: !Ref ApplicationLoadBalancer

    TargetGroup1:
        Description: The created TargetGroup 1
        Value: !Ref Test1TargetGroup

    LoadBalancerSecurityGroup:
        Description: the securty group for the ALB
        Value: !Ref ALBSecurityGroup

    InstanceId:
        Description: InstanceId of the newly created EC2 instance
        Value: !Ref 'EC2Instance'

    AZ:
        Description: Availability Zone of the newly created EC2 instance
        Value: !GetAtt [EC2Instance, AvailabilityZone]

    PublicDNS:
       Description: Public DNSName of the newly created EC2 instance
       Value: !GetAtt [EC2Instance, PublicDnsName]

    PublicIP:
       Description: Public IP address of the newly created EC2 instance
       Value: !GetAtt [EC2Instance, PublicIp]

    PrivateIP:
       Description: Private IP address of the newly created EC2 instance
       Value: !GetAtt [EC2Instance, PrivateIp]
